{
  "version": 3,
  "sources": ["browser-external:crypto", "../../@spotify/web-api-ts-sdk/src/endpoints/EndpointsBase.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/AlbumsEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/ArtistsEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/AudiobooksEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/BrowseEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/ChaptersEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/EpisodesEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/RecommendationsEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/MarketsEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/PlayerEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/PlaylistsEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/SearchEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/ShowsEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/TracksEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/auth/IAuthStrategy.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/UsersEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/endpoints/CurrentUserEndpoints.ts", "../../@spotify/web-api-ts-sdk/src/auth/Crypto.ts", "../../@spotify/web-api-ts-sdk/src/auth/AccessTokenHelpers.ts", "../../@spotify/web-api-ts-sdk/src/auth/ClientCredentialsStrategy.ts", "../../@spotify/web-api-ts-sdk/src/auth/ImplicitGrantStrategy.ts", "../../@spotify/web-api-ts-sdk/src/auth/AuthorizationCodeWithPKCEStrategy.ts", "../../@spotify/web-api-ts-sdk/src/serialization/DefaultResponseDeserializer.ts", "../../@spotify/web-api-ts-sdk/src/responsevalidation/DefaultResponseValidator.ts", "../../@spotify/web-api-ts-sdk/src/errorhandling/NoOpErrorHandler.ts", "../../@spotify/web-api-ts-sdk/src/redirection/DocumentLocationRedirectionStrategy.ts", "../../@spotify/web-api-ts-sdk/src/caching/GenericCache.ts", "../../@spotify/web-api-ts-sdk/src/caching/LocalStorageCachingStrategy.ts", "../../@spotify/web-api-ts-sdk/src/caching/InMemoryCachingStrategy.ts", "../../@spotify/web-api-ts-sdk/src/auth/ProvidedAccessTokenStrategy.ts", "../../@spotify/web-api-ts-sdk/src/SpotifyApi.ts", "../../@spotify/web-api-ts-sdk/src/errorhandling/ConsoleLoggingErrorHandler.ts", "../../@spotify/web-api-ts-sdk/src/Scopes.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import { SpotifyApi } from \"../SpotifyApi.js\";\n\nexport default class EndpointsBase {\n    constructor(protected api: SpotifyApi) {\n    }\n\n    protected async getRequest<TReturnType>(url: string): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"GET\", url);\n    }\n\n    protected async postRequest<TReturnType, TBody = unknown>(url: string, body?: TBody, contentType: string | undefined = undefined): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"POST\", url, body, contentType);\n    }\n\n    protected async putRequest<TReturnType, TBody = unknown>(url: string, body?: TBody, contentType: string | undefined = undefined): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"PUT\", url, body, contentType);\n    }\n\n    protected async deleteRequest<TReturnType, TBody = unknown>(url: string, body?: TBody): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"DELETE\", url, body);\n    }\n\n    protected paramsFor(args: any) {\n        const params = new URLSearchParams();\n        for (let key of Object.getOwnPropertyNames(args)) {\n            if (args[key] || (args[key] === 0) || (!args[key] && typeof args[key] === 'boolean')) {\n                params.append(key, args[key].toString());\n            }\n        }\n        return [...params].length > 0 ? `?${params.toString()}` : \"\";\n    }\n}\n\n", "import type { Market, Album, Albums, MaxInt, Page, SimplifiedTrack } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class AlbumsEndpoints extends EndpointsBase {\n\n    public async get(id: string, market?: Market): Promise<Album>;\n    public async get(ids: string[], market?: Market): Promise<Album[]>;\n    public async get(idOrIds: string | string[], market?: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            const album = await this.getRequest<Album>(`albums/${idOrIds}${params}`);\n            return album;\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        // TODO: only returns top 20, validate here\n        const response = await this.getRequest<Albums>(`albums${params}`);\n        return response.albums;\n    }\n\n    public tracks(albumId: string, market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset });\n        return this.getRequest<Page<SimplifiedTrack>>(`albums/${albumId}/tracks${params}`);\n    }\n}\n", "\nimport type {\n    Artist,\n    Artists,\n    Market,\n    MaxInt,\n    Page,\n    SimplifiedAlbum,\n    TopTracksResult,\n} from \"../types.js\";\nimport EndpointsBase from \"./EndpointsBase.js\";\n\nexport default class ArtistsEndpoints extends EndpointsBase {\n    public async get(id: string): Promise<Artist>;\n    public async get(ids: string[]): Promise<Artist[]>;\n    public async get(idOrIds: string | string[]) {\n        if (typeof idOrIds === \"string\") {\n            const artist = this.getRequest<Artist>(`artists/${idOrIds}`);\n            return artist;\n        }\n\n        const params = this.paramsFor({ ids: idOrIds });\n        const response = await this.getRequest<Artists>(`artists${params}`);\n        return response.artists;\n    }\n\n    public albums(\n        id: string,\n        includeGroups?: string,\n        market?: Market,\n        limit?: MaxInt<50>,\n        offset?: number\n    ) {\n        const params = this.paramsFor({\n            include_groups: includeGroups,\n            market,\n            limit,\n            offset,\n        });\n        return this.getRequest<Page<SimplifiedAlbum>>(\n            `artists/${id}/albums${params}`\n        );\n    }\n\n    public topTracks(id: string, market: Market) {\n        // BUG: market is flagged as optional in the docs, but it's actually required for this endpoint\n        // otherwise you get a 400\n\n        const params = this.paramsFor({ market });\n        return this.getRequest<TopTracksResult>(\n            `artists/${id}/top-tracks${params}`\n        );\n    }\n\n    public relatedArtists(id: string) {\n        return this.getRequest<Artists>(`artists/${id}/related-artists`);\n    }\n}\n", "import type { Market, Audiobook, Audiobooks, MaxInt, Page, SimplifiedChapter } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class AudiobooksEndpoints extends EndpointsBase {\n    public async get(id: string, market?: Market): Promise<Audiobook>;\n    public async get(ids: string[], market?: Market): Promise<Audiobook[]>;\n    public async get(idOrIds: string | string[], market?: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Audiobook>(`audiobooks/${idOrIds}${params}`);\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Audiobooks>(`audiobooks${params}`);\n        return response.audiobooks;\n    }\n\n    public getAudiobookChapters(id: string, market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset });\n        return this.getRequest<Page<SimplifiedChapter>>(`audiobooks/${id}/chapters${params}`);\n    }\n\n}\n", "import type { CountryCodeA2, MaxInt, Categories, Category, NewReleases, FeaturedPlaylists } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class BrowseEndpoints extends EndpointsBase {\n\n    public getCategories(country?: CountryCodeA2, locale?: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, locale, limit, offset });\n\n        return this.getRequest<Categories>(`browse/categories${params}`);\n    }\n\n    public getCategory(categoryId: string, country?: CountryCodeA2, locale?: string) {\n        const params = this.paramsFor({ country, locale });\n\n        return this.getRequest<Category>(`browse/categories/${categoryId}${params}`);\n    }\n\n    public getNewReleases(country?: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, limit, offset });\n        return this.getRequest<NewReleases>(`browse/new-releases${params}`);\n    }\n\n    public getFeaturedPlaylists(country?: CountryCodeA2, locale?: string, timestamp?: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, locale, timestamp, limit, offset });\n        return this.getRequest<FeaturedPlaylists>(`browse/featured-playlists${params}`);\n    }\n\n    public getPlaylistsForCategory(category_id: string, country?: CountryCodeA2, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, limit, offset });\n        return this.getRequest<FeaturedPlaylists>(`browse/categories/${category_id}/playlists${params}`);\n    }\n}\n", "import type { Chapter, Chapters } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\n// These are mandatory, and the only supported market codes for the Chapters API\nexport type ChapterMarket = \"GB\" | \"US\" | \"IE\" | \"NZ\" | \"AU\";\n\nexport default class ChaptersEndpoints extends EndpointsBase {\n    public get(id: string, market: ChapterMarket): Promise<Chapter>;\n    public get(ids: string[], market: ChapterMarket): Promise<Chapter[]>;\n    public async get(idOrIds: string | string[], market: ChapterMarket) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Chapter>(`chapters/${idOrIds}${params}`);\n        }\n\n        // TODO: Only returns top 50, validate / pre-check here\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Chapters>(`chapters${params}`);\n        return response.chapters;\n    }\n}\n", "import type { Market, Episode, Episodes } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class EpisodesEndpoints extends EndpointsBase {\n\n    public get(id: string, market: Market): Promise<Episode>\n    public get(ids: string[], market: Market): Promise<Episode[]>\n    public async get(idOrIds: string | string[], market: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Episode>(`episodes/${idOrIds}${params}`);\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Episodes>(`episodes${params}`);\n        return response.episodes;\n    }\n}\n", "import type { Genres, Track } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class RecommendationsEndpoints extends EndpointsBase {\n    public get(request: RecommendationsRequestRequiredArguments | RecommendationsRequest) {\n        const params = this.paramsFor(request);\n        return this.getRequest<RecommendationsResponse>(`recommendations${params}`);\n    }\n\n    public genreSeeds() {\n        return this.getRequest<Genres>('recommendations/available-genre-seeds');\n    }\n}\n\nexport interface RecommendationsRequestRequiredArguments {\n    seed_artists?: string[];\n    seed_genres?: string[];\n    seed_tracks?: string[];\n}\n\nexport interface RecommendationsRequest extends RecommendationsRequestRequiredArguments {\n    limit?: number;\n    market?: string;\n    min_acousticness?: number;\n    max_acousticness?: number;\n    target_acousticness?: number;\n    min_danceability?: number;\n    max_danceability?: number;\n    target_danceability?: number;\n    min_duration_ms?: number;\n    max_duration_ms?: number;\n    target_duration_ms?: number;\n    min_energy?: number;\n    max_energy?: number;\n    target_energy?: number;\n    min_instrumentalness?: number;\n    max_instrumentalness?: number;\n    target_instrumentalness?: number;\n    min_key?: number;\n    max_key?: number;\n    target_key?: number;\n    min_liveness?: number;\n    max_liveness?: number;\n    target_liveness?: number;\n    min_loudness?: number;\n    max_loudness?: number;\n    target_loudness?: number;\n    min_mode?: number;\n    max_mode?: number;\n    target_mode?: number;\n    min_popularity?: number;\n    max_popularity?: number;\n    target_popularity?: number;\n    min_speechiness?: number;\n    max_speechiness?: number;\n    target_speechiness?: number;\n    min_tempo?: number;\n    max_tempo?: number;\n    target_tempo?: number;\n    min_time_signature?: number;\n    max_time_signature?: number;\n    target_time_signature?: number;\n    min_valence?: number;\n    max_valence?: number;\n    target_valence?: number;\n}\n\nexport interface RecommendationsResponse {\n    seeds: RecommendationSeed[];\n    tracks: Track[];\n}\n\nexport interface RecommendationSeed {\n    id: string;\n    href: string;\n    type: string;\n\n    initialPoolSize: number;\n    afterFilteringSize: number;\n    afterRelinkingSize: number;\n}\n", "import type { Markets } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class MarketsEndpoints extends EndpointsBase {\n    public getAvailableMarkets() {\n        return this.getRequest<Markets>('markets');\n    }\n}\n", "import type { Devices, Market, MaxInt, PlaybackState, Queue, RecentlyPlayedTracksPage } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\ninterface QueryRange {\n    timestamp: number;\n    type: \"before\" | \"after\"\n}\n\nexport default class PlayerEndpoints extends EndpointsBase {\n\n    public getPlaybackState(market?: Market, additional_types?: string) {\n        const params = this.paramsFor({ market, additional_types });\n        return this.getRequest<PlaybackState>(`me/player${params}`);\n    }\n\n    public getAvailableDevices() {\n        return this.getRequest<Devices>('me/player/devices');\n    }\n\n    public getCurrentlyPlayingTrack(market?: Market, additional_types?: string) {\n        const params = this.paramsFor({ market, additional_types });\n        return this.getRequest<PlaybackState>(`me/player/currently-playing${params}`);\n    }\n\n    public getRecentlyPlayedTracks(limit?: MaxInt<50>, queryRange?: QueryRange) {\n        const paramObj: any = { limit };\n\n        if (queryRange) {\n            if (queryRange.type === \"before\") {\n                paramObj.before = queryRange.timestamp\n            } else if (queryRange.type === \"after\") {\n                paramObj.after = queryRange.timestamp\n            }\n        }\n\n        const params = this.paramsFor(paramObj);\n        return this.getRequest<RecentlyPlayedTracksPage>(`me/player/recently-played${params}`);\n    }\n\n    public getUsersQueue() {\n        return this.getRequest<Queue>('me/player/queue');\n    }\n\n    public async transferPlayback(device_ids: string[], play?: boolean) {\n        if (device_ids.length > 1) {\n            throw new Error(\"Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return 400 Bad Request\");\n        }\n        await this.putRequest('me/player', { device_ids, play });\n    }\n\n    public async startResumePlayback(device_id: string, context_uri?: string, uris?: string[], offset?: object, positionMs?: number) {\n        const params = this.paramsFor({ device_id });\n        await this.putRequest(`me/player/play${params}`, { context_uri, uris, offset, positionMs });\n    }\n\n    public async pausePlayback(device_id: string) {\n        const params = this.paramsFor({ device_id });\n        await this.putRequest(`me/player/pause${params}`);\n    }\n\n    public async skipToNext(device_id: string) {\n        const params = this.paramsFor({ device_id });\n        await this.postRequest(`me/player/next${params}`);\n    }\n\n    public async skipToPrevious(device_id: string) {\n        const params = this.paramsFor({ device_id });\n        await this.postRequest(`me/player/previous${params}`);\n    }\n\n    public async seekToPosition(position_ms: number, device_id?: string) {\n        const params = this.paramsFor({ position_ms, device_id });\n        await this.putRequest(`me/player/seek${params}`);\n    }\n\n    public async setRepeatMode(state: 'track' | 'context' | 'off', device_id?: string) {\n        const params = this.paramsFor({ state, device_id });\n        await this.putRequest(`me/player/repeat${params}`);\n    }\n\n    public async setPlaybackVolume(volume_percent: number, device_id?: string) {\n        const params = this.paramsFor({ volume_percent, device_id });\n        await this.putRequest(`me/player/volume${params}`);\n    }\n\n    public async togglePlaybackShuffle(state: boolean, device_id?: string) {\n        const params = this.paramsFor({ state, device_id });\n        await this.putRequest(`me/player/shuffle${params}`);\n    }\n\n    public async addItemToPlaybackQueue(uri: string, device_id?: string) {\n        const params = this.paramsFor({ uri, device_id });\n        await this.postRequest(`me/player/queue${params}`);\n    }\n}\n", "import type { Market, Playlist, MaxInt, Page, Track, SnapshotReference, Image, PlaylistedTrack, QueryAdditionalTypes, TrackItem } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class PlaylistsEndpoints extends EndpointsBase {\n\n    public getPlaylist<AdditionalTypes extends QueryAdditionalTypes | undefined = undefined>(\n        playlist_id: string, market?: Market, fields?: string, additional_types?: AdditionalTypes\n    ) {\n        // TODO: better support for fields\n        const params = this.paramsFor({ market, fields, additional_types: additional_types?.join(',') });\n        return this.getRequest<Playlist<AdditionalTypes extends undefined ? Track : TrackItem>>(`playlists/${playlist_id}${params}`);\n    }\n\n    public getPlaylistItems<AdditionalTypes extends QueryAdditionalTypes | undefined = undefined>(\n        playlist_id: string, market?: Market, fields?: string, limit?: MaxInt<50>, offset?: number, additional_types?: AdditionalTypes\n    ) {\n        // TODO: better support for fields\n        const params = this.paramsFor({ market, fields, limit, offset, additional_types: additional_types?.join(',') });\n        return this.getRequest<Page<PlaylistedTrack<AdditionalTypes extends undefined ? Track : TrackItem>>>(`playlists/${playlist_id}/tracks${params}`);\n    }\n\n    public async changePlaylistDetails(playlist_id: string, request: ChangePlaylistDetailsRequest) {\n        await this.putRequest(`playlists/${playlist_id}`, request);\n    }\n\n    public movePlaylistItems(playlist_id: string, range_start: number, range_length: number, moveToPosition: number) {\n        return this.updatePlaylistItems(playlist_id, {\n            range_start,\n            range_length,\n            insert_before: moveToPosition\n        });\n    }\n\n    public updatePlaylistItems(playlist_id: string, request: UpdatePlaylistItemsRequest) {\n        return this.putRequest<SnapshotReference>(`playlists/${playlist_id}/tracks`, request);\n    }\n\n    public async addItemsToPlaylist(playlist_id: string, uris?: string[], position?: number) {\n        await this.postRequest(`playlists/${playlist_id}/tracks`, { position, uris: uris });\n    }\n\n    public async removeItemsFromPlaylist(playlist_id: string, request: RemovePlaylistItemsRequest) {\n        await this.deleteRequest(`playlists/${playlist_id}/tracks`, request);\n    }\n\n    public getUsersPlaylists(user_id: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest<Page<Playlist>>(`users/${user_id}/playlists${params}`);\n    }\n\n    public createPlaylist(user_id: string, request: CreatePlaylistRequest) {\n        return this.postRequest<Playlist>(`users/${user_id}/playlists`, request);\n    }\n\n    public getPlaylistCoverImage(playlist_id: string) {\n        return this.getRequest<Image[]>(`playlists/${playlist_id}/images`);\n    }\n\n    public async addCustomPlaylistCoverImage(playlist_id: string, imageData: Buffer | HTMLImageElement | HTMLCanvasElement | string) {\n        let base64EncodedJpeg: string = \"\";\n\n        if (imageData instanceof Buffer) {\n            base64EncodedJpeg = imageData.toString(\"base64\");\n        } else if (imageData instanceof HTMLCanvasElement) {\n            base64EncodedJpeg = imageData.toDataURL(\"image/jpeg\").split(';base64,')[1];\n        } else if (imageData instanceof HTMLImageElement) {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = imageData.width;\n            canvas.height = imageData.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.drawImage(imageData, 0, 0);\n            base64EncodedJpeg = canvas.toDataURL(\"image/jpeg\").split(';base64,')[1];\n        } else if (typeof imageData === \"string\") {\n            base64EncodedJpeg = imageData;\n        } else {\n            throw new Error(\"ImageData must be a Buffer, HTMLImageElement, HTMLCanvasElement, or string containing a base64 encoded jpeg\");\n        }\n\n        await this.addCustomPlaylistCoverImageFromBase64String(playlist_id, base64EncodedJpeg);\n    }\n\n    public async addCustomPlaylistCoverImageFromBase64String(playlist_id: string, base64EncodedJpeg: string) {\n        await this.putRequest(`playlists/${playlist_id}/images`, base64EncodedJpeg, \"image/jpeg\");\n    }\n}\n\ninterface RemovePlaylistItemsRequest {\n    tracks: Array<{ uri: string }>;\n    snapshot_id?: string;\n}\n\ninterface UpdatePlaylistItemsRequest {\n    uris?: string[];\n    range_start?: number;\n    insert_before?: number;\n    range_length?: number;\n    snapshot_id?: string;\n}\n\ninterface ChangePlaylistDetailsRequest {\n    name?: string;\n    public?: boolean;\n    collaborative?: boolean;\n    description?: string;\n}\n\n// TODO: deduplicate this from above\ninterface CreatePlaylistRequest {\n    name: string;\n    public?: boolean;\n    collaborative?: boolean;\n    description?: string;\n}\n", "import type { ItemTypes, Market, MaxInt, SearchResults } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport interface SearchExecutionFunction {\n    <const T extends readonly ItemTypes[]>(q: string, type: T, market?: Market, limit?: MaxInt<50>, offset?: number, include_external?: string): Promise<SearchResults<T>>;\n}\n\nexport default class SearchEndpoints extends EndpointsBase {\n    public async execute<const T extends readonly ItemTypes[]>(q: string, type: T, market?: Market, limit?: MaxInt<50>, offset?: number, include_external?: string) {\n        const params = this.paramsFor({ q, type, market, limit, offset, include_external });\n        return await this.getRequest<SearchResults<T>>(`search${params}`);\n    }\n}\n", "import type { Market, Show, Shows, MaxInt, Page, SimplifiedEpisode } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class ShowsEndpoints extends EndpointsBase {\n\n    public get(id: string, market: Market): Promise<Show>;\n    public get(ids: string[], market: Market): Promise<Show[]>\n    public async get(idOrIds: string | string[], market: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market })\n            return this.getRequest<Show>(`shows/${idOrIds}${params}`);\n        }\n\n        // TODO: only returns 50, validate here\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Shows>(`shows${params}`);\n        return response.shows;\n    }\n\n    public episodes(id: string, market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset })\n        return this.getRequest<Page<SimplifiedEpisode>>(`shows/${id}/episodes${params}`);\n    }\n}\n", "import type { Market, Track, Tracks, AudioFeatures, AudioFeaturesCollection, AudioAnalysis } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class TracksEndpoints extends EndpointsBase {\n\n    public get(id: string, market?: Market): Promise<Track>\n    public get(ids: string[], market?: Market): Promise<Track[]>\n    public async get(idOrIds: string | string[], market?: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Track>(`tracks/${idOrIds}${params}`);\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        // TODO: only returns top 20, validate here\n        const response = await this.getRequest<Tracks>(`tracks${params}`);\n        return response.tracks;\n    }\n\n    public audioFeatures(id: string): Promise<AudioFeatures>\n    public audioFeatures(ids: string[]): Promise<AudioFeatures[]>\n    public async audioFeatures(idOrIds: string | string[]) {\n        if (typeof idOrIds === 'string') {\n            return this.getRequest<AudioFeatures>(`audio-features/${idOrIds}`);\n        }\n        const params = this.paramsFor({ ids: idOrIds });\n        const response = await this.getRequest<AudioFeaturesCollection>(`audio-features${params}`);\n        return response.audio_features;\n    }\n\n    public audioAnalysis(id: string) {\n        return this.getRequest<AudioAnalysis>(`audio-analysis/${id}`);\n    }\n\n}\n", "import type { AccessToken, SdkConfiguration } from \"../types.js\";\n\nexport const emptyAccessToken: AccessToken = { access_token: \"emptyAccessToken\", token_type: \"\", expires_in: 0, refresh_token: \"\", expires: -1 };\nexport function isEmptyAccessToken(value: any): boolean {\n    return value === emptyAccessToken;\n}\n\nexport default interface IAuthStrategy {\n    setConfiguration(configuration: SdkConfiguration): void;\n    getOrCreateAccessToken(): Promise<AccessToken>;\n    getAccessToken(): Promise<AccessToken | null>;\n    removeAccessToken(): void;\n}\n", "import type { User } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class UsersEndpoints extends EndpointsBase {\n\n    public profile(userId: string) {\n        return this.getRequest<User>(`users/${userId}`);\n    }\n}\n", "import { SpotifyApi } from '../SpotifyApi.js';\nimport type { User, Page, Artist, Track, MaxInt, FollowedArtists, Market, SavedAlbum, SimplifiedAudiobook, SimplifiedPlaylist, SavedEpisode, SavedShow, SavedTrack, UserProfile } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class CurrentUserEndpoints extends EndpointsBase {\n    public albums: CurrentUserAlbumsEndpoints;\n    public audiobooks: CurrentUserAudiobooksEndpoints;\n    public episodes: CurrentUserEpisodesEndpoints;\n    public playlists: CurrentUserPlaylistsEndpoints;\n    public shows: CurrentUserShowsEndpoints;\n    public tracks: CurrentUserTracksEndpoints;\n\n    constructor(api: SpotifyApi) {\n        super(api);\n\n        this.albums = new CurrentUserAlbumsEndpoints(api);\n        this.audiobooks = new CurrentUserAudiobooksEndpoints(api);\n        this.episodes = new CurrentUserEpisodesEndpoints(api);\n        this.playlists = new CurrentUserPlaylistsEndpoints(api);\n        this.shows = new CurrentUserShowsEndpoints(api);\n        this.tracks = new CurrentUserTracksEndpoints(api);\n    }\n\n    public profile() {\n        return this.getRequest<UserProfile>('me');\n    }\n\n    public topItems<T extends \"artists\" | \"tracks\">(type: T, time_range?: 'short_term' | 'medium_term' | 'long_term', limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ time_range, limit, offset });\n        return this.getRequest<Page<T extends \"artists\" ? Artist : Track>>(`me/top/${type}${params}`);\n    }\n\n    public followedArtists(after?: string, limit?: MaxInt<50>) {\n        const params = this.paramsFor({ type: \"artist\", after, limit });\n        return this.getRequest<FollowedArtists>(`me/following${params}`);\n    }\n\n    public async followArtistsOrUsers(ids: string[], type: 'artist' | 'user') {\n        const params = this.paramsFor({ type });\n        await this.putRequest(`me/following${params}`, { ids });\n    }\n\n    public async unfollowArtistsOrUsers(ids: string[], type: 'artist' | 'user') {\n        const params = this.paramsFor({ type });\n        await this.deleteRequest(`me/following${params}`, { ids });\n    }\n\n    public followsArtistsOrUsers(ids: string[], type: 'artist' | 'user') {\n        const params = this.paramsFor({ ids, type });\n        return this.getRequest<boolean[]>(`me/following/contains${params}`);\n    }\n}\n\n\nclass CurrentUserAlbumsEndpoints extends EndpointsBase {\n    public savedAlbums(limit?: MaxInt<50>, offset?: number, market?: Market) {\n        const params = this.paramsFor({ limit, offset, market });\n        return this.getRequest<Page<SavedAlbum>>(`me/albums${params}`);\n    }\n\n    public async saveAlbums(ids: string[]) {\n        await this.putRequest('me/albums', ids);\n    }\n\n    public async removeSavedAlbums(ids: string[]) {\n        await this.deleteRequest('me/albums', ids);\n    }\n\n    public hasSavedAlbums(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/albums/contains${params}`);\n    }\n}\n\nclass CurrentUserAudiobooksEndpoints extends EndpointsBase {\n    public savedAudiobooks(limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest<Page<SimplifiedAudiobook>>(`me/audiobooks${params}`);\n    }\n\n    public async saveAudiobooks(ids: string[]) {\n        await this.putRequest('me/audiobooks', ids);\n    }\n\n    public async removeSavedAudiobooks(ids: string[]) {\n        await this.deleteRequest('me/audiobooks', ids);\n    }\n\n    public hasSavedAudiobooks(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/audiobooks/contains${params}`);\n    }\n}\n\nclass CurrentUserEpisodesEndpoints extends EndpointsBase {\n    public savedEpisodes(market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset });\n        return this.getRequest<Page<SavedEpisode>>(`me/episodes${params}`);\n    }\n\n    public async saveEpisodes(ids: string[]) {\n        await this.putRequest(`me/episodes`, ids)\n    }\n\n    public async removeSavedEpisodes(ids: string[]) {\n        await this.deleteRequest(`me/episodes`, ids)\n    }\n\n    public hasSavedEpisodes(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/episodes/contains${params}`);\n    }\n}\n\nclass CurrentUserPlaylistsEndpoints extends EndpointsBase {\n    public playlists(limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest<Page<SimplifiedPlaylist>>(`me/playlists${params}`);\n    }\n\n    public async follow(playlist_id: string) {\n        await this.putRequest(`playlists/${playlist_id}/followers`);\n    }\n\n    public async unfollow(playlist_id: string) {\n        await this.deleteRequest(`playlists/${playlist_id}/followers`);\n    }\n\n    public isFollowing(playlistId: string, ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`playlists/${playlistId}/followers/contains${params}`)\n    }\n}\n\nclass CurrentUserShowsEndpoints extends EndpointsBase {\n    public savedShows(limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset })\n        return this.getRequest<Page<SavedShow>>(`me/shows${params}`);\n    }\n\n    public saveShows(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.putRequest(`me/shows${params}`);\n    }\n\n    public removeSavedShows(ids: string[], market?: Market) {\n        const params = this.paramsFor({ ids, market });\n        return this.deleteRequest(`me/shows${params}`);\n    }\n\n    public hasSavedShow(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/shows/contains${params}`);\n    }\n}\n\nclass CurrentUserTracksEndpoints extends EndpointsBase {\n    public savedTracks(limit?: MaxInt<50>, offset?: number, market?: Market) {\n        const params = this.paramsFor({ limit, offset, market });\n        return this.getRequest<Page<SavedTrack>>(`me/tracks${params}`);\n    }\n    public async saveTracks(ids: string[]) {\n        await this.putRequest('me/tracks', ids);\n    }\n\n    public async removeSavedTracks(ids: string[]) {\n        await this.deleteRequest('me/tracks', ids);\n    }\n\n    public hasSavedTracks(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/tracks/contains${params}`);\n    }\n}\n\n", "export class Crypto {\n    public static get current() {\n        return this.hasSubtleCrypto ? window.crypto : this.tryLoadNodeWebCrypto();\n    }\n\n    private static get hasSubtleCrypto() {\n        return typeof window !== 'undefined' && typeof window.crypto !== 'undefined' && typeof window.crypto.subtle !== 'undefined';\n    }\n\n    private static tryLoadNodeWebCrypto() {\n        try {\n            // Deliberately avoid bundling for browsers depending\n            // on node by doing this require during execution.\n            const { webcrypto } = require('crypto');\n            return webcrypto;\n        } catch (e) {\n            throw e;\n        }\n    }\n}\n", "import type { AccessToken, ICachable } from \"../types.js\";\nimport { Crypto } from \"./Crypto.js\";\n\nexport default class AccessTokenHelpers {\n    public static async refreshCachedAccessToken(clientId: string, item: AccessToken) {\n        const updated = await AccessTokenHelpers.refreshToken(clientId, item.refresh_token);\n        return AccessTokenHelpers.toCachable(updated);\n    }\n\n    public static toCachable(item: AccessToken): ICachable & AccessToken {\n        if (item.expires && item.expires === -1) {\n            return item;\n        }\n\n        return { ...item, expires: this.calculateExpiry(item) };\n    }\n\n    public static calculateExpiry(item: AccessToken) {\n        return Date.now() + (item.expires_in * 1000);\n    }\n\n    private static async refreshToken(clientId: string, refreshToken: string): Promise<AccessToken> {\n        const params = new URLSearchParams();\n        params.append(\"client_id\", clientId);\n        params.append(\"grant_type\", \"refresh_token\");\n        params.append(\"refresh_token\", refreshToken);\n\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n            body: params\n        });\n\n        const text = await result.text();\n\n        if (!result.ok) {\n            throw new Error(`Failed to refresh token: ${result.statusText}, ${text}`);\n        }\n\n        const json: AccessToken = JSON.parse(text);\n        return json;\n    }\n\n    public static generateCodeVerifier(length: number) {\n        let text = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    }\n\n    public static async generateCodeChallenge(codeVerifier: string) {\n        const data = new TextEncoder().encode(codeVerifier);\n        const digest = await Crypto.current.subtle.digest('SHA-256', data);\n\n        const digestBytes = [...new Uint8Array(digest)];\n        const hasBuffer = typeof Buffer !== 'undefined';\n\n        const digestAsBase64 = hasBuffer\n            ? Buffer.from(digest).toString('base64')\n            : btoa(String.fromCharCode.apply(null, digestBytes));\n\n        return digestAsBase64\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '');\n    }\n}\n", "import type { SdkConfiguration, ICachingStrategy, AccessToken } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy from \"./IAuthStrategy.js\";\n\nexport default class ClientCredentialsStrategy implements IAuthStrategy {\n\n    private static readonly cacheKey = \"spotify-sdk:ClientCredentialsStrategy:token\";\n    private configuration: SdkConfiguration | null = null;\n    private get cache(): ICachingStrategy { return this.configuration!.cachingStrategy; }\n\n    constructor(\n        private clientId: string,\n        private clientSecret: string,\n        private scopes: string[] = []\n    ) {\n    }\n\n    public setConfiguration(configuration: SdkConfiguration): void {\n        this.configuration = configuration;\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        const token = await this.cache.getOrCreate<AccessToken>(\n            ClientCredentialsStrategy.cacheKey,\n            async () => {\n                const token = await this.getTokenFromApi();\n                return AccessTokenHelpers.toCachable(token);\n            },\n            async (_) => {\n                const refreshed = await this.getTokenFromApi();\n                return AccessTokenHelpers.toCachable(refreshed);\n            }\n        );\n\n        return token;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        const token = await this.cache.get<AccessToken>(ClientCredentialsStrategy.cacheKey);\n        return token;\n    }\n\n    public removeAccessToken(): void {\n        this.cache.remove(ClientCredentialsStrategy.cacheKey);\n    }\n\n    private async getTokenFromApi(): Promise<AccessToken> {\n        const options = {\n            grant_type: 'client_credentials',\n            scope: this.scopes.join(' ')\n        } as any;\n\n        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');\n        const hasBuffer = typeof Buffer !== 'undefined';\n        const credentials = `${this.clientId}:${this.clientSecret}`;\n\n        const basicAuth = hasBuffer\n            ? Buffer.from(credentials).toString('base64')\n            : btoa(credentials);\n\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Authorization\": `Basic ${basicAuth}`\n            },\n            body: bodyAsString\n        });\n\n        if (result.status !== 200) {\n            throw new Error(\"Failed to get access token.\");\n        }\n\n        const json = await result.json();\n        return json;\n    }\n}\n", "import type { SdkConfiguration, AccessToken, ICachingStrategy } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy, { emptyAccessToken } from \"./IAuthStrategy.js\";\n\nexport default class ImplicitGrantStrategy implements IAuthStrategy {\n\n    private static readonly cacheKey = \"spotify-sdk:ImplicitGrantStrategy:token\";\n    private configuration: SdkConfiguration | null = null;\n    private get cache(): ICachingStrategy { return this.configuration!.cachingStrategy; }\n\n    constructor(\n        private clientId: string,\n        private redirectUri: string,\n        private scopes: string[]\n    ) {\n    }\n\n    public setConfiguration(configuration: SdkConfiguration): void {\n        this.configuration = configuration;\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        const token = await this.cache.getOrCreate<AccessToken>(\n            ImplicitGrantStrategy.cacheKey,\n            async () => {\n                const token = await this.redirectOrVerifyToken();\n                return AccessTokenHelpers.toCachable(token);\n            }, async (expiring) => {\n                return AccessTokenHelpers.refreshCachedAccessToken(this.clientId, expiring);\n            },\n        );\n\n        return token;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        const token = await this.cache.get<AccessToken>(ImplicitGrantStrategy.cacheKey);\n        return token;\n    }\n\n    public removeAccessToken(): void {\n        this.cache.remove(ImplicitGrantStrategy.cacheKey);\n    }\n\n    private async redirectOrVerifyToken(): Promise<AccessToken> {\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const accessToken = hashParams.get(\"access_token\");\n\n        if (accessToken) {\n            return Promise.resolve({\n                access_token: accessToken,\n                token_type: hashParams.get(\"token_type\") ?? \"\",\n                expires_in: parseInt(hashParams.get(\"expires_in\") ?? \"0\"),\n                refresh_token: hashParams.get(\"refresh_token\") ?? \"\",\n                expires: Number(hashParams.get(\"expires\")) || 0\n            });\n        }\n\n        const scopes = this.scopes ?? [];\n        var scope = scopes.join(' ');\n\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"response_type\", \"token\");\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"scope\", scope);\n\n        const authUrl = 'https://accounts.spotify.com/authorize?' + params.toString();\n\n        this.configuration!.redirectionStrategy.redirect(authUrl);\n        return emptyAccessToken;\n    }\n}\n", "import type { ICachable, SdkConfiguration, AccessToken, ICachingStrategy } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy, { emptyAccessToken } from \"./IAuthStrategy.js\";\n\ninterface CachedVerifier extends ICachable {\n    verifier: string;\n    expiresOnAccess: boolean;\n}\n\nexport default class AuthorizationCodeWithPKCEStrategy implements IAuthStrategy {\n\n    private static readonly cacheKey = \"spotify-sdk:AuthorizationCodeWithPKCEStrategy:token\";\n    private configuration: SdkConfiguration | null = null;\n    protected get cache(): ICachingStrategy { return this.configuration!.cachingStrategy; }\n\n    constructor(\n        protected clientId: string,\n        protected redirectUri: string,\n        protected scopes: string[]\n    ) {\n    }\n\n    public setConfiguration(configuration: SdkConfiguration): void {\n        this.configuration = configuration;\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        const token = await this.cache.getOrCreate<AccessToken>(\n            AuthorizationCodeWithPKCEStrategy.cacheKey,\n            async () => {\n                const token = await this.redirectOrVerifyToken();\n                return AccessTokenHelpers.toCachable(token);\n            }, async (expiring) => {\n                return AccessTokenHelpers.refreshCachedAccessToken(this.clientId, expiring);\n            },\n        );\n\n        return token;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        const token = await this.cache.get<AccessToken>(AuthorizationCodeWithPKCEStrategy.cacheKey);\n        return token;\n    }\n\n    public removeAccessToken(): void {\n        this.cache.remove(AuthorizationCodeWithPKCEStrategy.cacheKey);\n    }\n\n    private async redirectOrVerifyToken(): Promise<AccessToken> {\n        const hashParams = new URLSearchParams(window.location.search);\n        const code = hashParams.get(\"code\");\n\n        if (code) {\n            const token = await this.verifyAndExchangeCode(code);\n            this.removeCodeFromUrl();\n            return token;\n        }\n\n        this.redirectToSpotify();\n        return emptyAccessToken; // Redirected away at this point, just make TypeScript happy :)         \n    }\n\n    private async redirectToSpotify() {\n        const verifier = AccessTokenHelpers.generateCodeVerifier(128);\n        const challenge = await AccessTokenHelpers.generateCodeChallenge(verifier);\n\n        const singleUseVerifier: CachedVerifier = { verifier, expiresOnAccess: true };\n        this.cache.setCacheItem(\"spotify-sdk:verifier\", singleUseVerifier);\n\n        const redirectTarget = await this.generateRedirectUrlForUser(this.scopes, challenge);\n        await this.configuration!.redirectionStrategy.redirect(redirectTarget);\n    }\n\n    private async verifyAndExchangeCode(code: string) {\n        const cachedItem = await this.cache.get<CachedVerifier>(\"spotify-sdk:verifier\");\n        const verifier = cachedItem?.verifier;\n\n        if (!verifier) {\n            throw new Error(\"No verifier found in cache - can't validate query string callback parameters.\");\n        }\n\n        await this.configuration!.redirectionStrategy.onReturnFromRedirect();\n        return await this.exchangeCodeForToken(code, verifier!);\n    }\n\n    private removeCodeFromUrl() {\n        const url = new URL(window.location.href);\n        url.searchParams.delete(\"code\");\n\n        const newUrl = url.search ? url.href : url.href.replace('?', '');\n        window.history.replaceState({}, document.title, newUrl);\n    }\n\n    protected async generateRedirectUrlForUser(scopes: string[], challenge: string) {\n        const scope = scopes.join(' ');\n\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"response_type\", \"code\");\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"scope\", scope);\n        params.append(\"code_challenge_method\", \"S256\");\n        params.append(\"code_challenge\", challenge);\n\n        return `https://accounts.spotify.com/authorize?${params.toString()}`;\n    }\n\n    protected async exchangeCodeForToken(code: string, verifier: string): Promise<AccessToken> {\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"grant_type\", \"authorization_code\");\n        params.append(\"code\", code);\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"code_verifier\", verifier!);\n\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n            body: params\n        });\n\n        const text = await result.text();\n\n        if (!result.ok) {\n            throw new Error(`Failed to exchange code for token: ${result.statusText}, ${text}`);\n        }\n\n        const json: AccessToken = JSON.parse(text);\n        return json;\n    }\n\n}\n\n", "import type { IResponseDeserializer } from \"../types.js\";\n\nexport default class DefaultResponseDeserializer implements IResponseDeserializer {\n    public async deserialize<TReturnType>(response: Response): Promise<TReturnType> {\n        const text = await response.text();\n\n        if (text.length > 0) {\n            const json = JSON.parse(text);\n            return json as TReturnType;\n        }\n\n        return null as TReturnType;\n    }\n}\n", "import type { IValidateResponses } from \"../types.js\";\n\nexport default class DefaultResponseValidator implements IValidateResponses {\n    public async validateResponse(response: Response): Promise<void> {\n\n        switch (response.status) {\n            case 401:\n                throw new Error(\"Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.\");\n            case 403:\n                const body = await response.text();\n                throw new Error(`Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here. Body: ${body}`);\n            case 429:\n                throw new Error(\"The app has exceeded its rate limits.\");\n            default:\n                if (!response.status.toString().startsWith('20')) {\n                    const body = await response.text();\n                    throw new Error(`Unrecognised response code: ${response.status} - ${response.statusText}. Body: ${body}`);\n                }\n        }\n\n    }\n}\n", "import type { IHandleErrors } from \"../types.js\";\n\nexport default class NoOpErrorHandler implements IHandleErrors {\n    public async handleErrors(_: any): Promise<boolean> {\n        return false;\n    }\n}\n", "import type { IRedirectionStrategy } from \"../types.js\";\n\nexport default class DocumentLocationRedirectionStrategy implements IRedirectionStrategy {\n    public async redirect(targetUrl: string | URL): Promise<void> {\n        document.location = targetUrl.toString();\n    }\n\n    public async onReturnFromRedirect(): Promise<void> {\n    }\n}\n", "import { isEmptyAccessToken } from \"../auth/IAuthStrategy.js\";\nimport { ICachingStrategy, ICachable } from \"../types.js\";\nimport { ICacheStore } from \"./ICacheStore.js\";\n\nexport default class GenericCache implements ICachingStrategy {\n    constructor(\n        private storage: ICacheStore,\n        private updateFunctions: Map<string, (item: any) => Promise<ICachable>> = new Map(),\n        private autoRenewInterval: number = 0,\n        private autoRenewWindow: number = 2 * 60 * 1000 // Two minutes\n    ) {\n        if (this.autoRenewInterval > 0) {\n            setInterval(() => this.autoRenewRenewableItems(), this.autoRenewInterval);\n        }\n    }\n\n    public async getOrCreate<T>(\n        cacheKey: string,\n        createFunction: () => Promise<T & ICachable & object>,\n        updateFunction?: (item: T) => Promise<T & ICachable & object>\n    ): Promise<T & ICachable> {\n        if (updateFunction) {\n            this.updateFunctions.set(cacheKey, updateFunction);\n        }\n\n        const item = await this.get<T>(cacheKey);\n        if (item) {\n            return item;\n        }\n\n        const newCacheItem = await createFunction();\n        if (!newCacheItem) {\n            throw new Error(\"Could not create cache item\");\n        }\n\n        if (!isEmptyAccessToken(newCacheItem)) {\n            this.setCacheItem(cacheKey, newCacheItem);\n        }\n\n        return newCacheItem;\n    }\n\n    public async get<T>(cacheKey: string): Promise<T & ICachable | null> {\n        let asString = this.storage.get(cacheKey);\n        let cachedItem: T & ICachable = asString ? JSON.parse(asString) : null;\n\n        if (this.itemDueToExpire(cachedItem) && this.updateFunctions.has(cacheKey)) {\n            const updateFunction = this.updateFunctions.get(cacheKey);\n            await this.tryUpdateItem(cacheKey, cachedItem, updateFunction!);\n\n            // Ensure updated item is returned\n            asString = this.storage.get(cacheKey);\n            cachedItem = asString ? JSON.parse(asString) : null;\n        }\n\n        if (!cachedItem) {\n            return null;\n        }\n\n        if (cachedItem.expires && (cachedItem.expires === -1 || cachedItem.expires <= Date.now())) {\n            this.remove(cacheKey);\n            return null;\n        }\n\n        if (cachedItem.expiresOnAccess && cachedItem.expiresOnAccess === true) {\n            this.remove(cacheKey);\n            return cachedItem;\n        }\n\n        return cachedItem;\n    }\n\n    public set(cacheKey: string, value: object, expiresIn: number): void {\n        const expires = Date.now() + expiresIn;\n        const cacheItem: ICachable = { ...value, expires };\n        this.setCacheItem(cacheKey, cacheItem);\n    }\n\n    public setCacheItem(cacheKey: string, cacheItem: ICachable): void {\n        const asString = JSON.stringify(cacheItem);\n        this.storage.set(cacheKey, asString);\n    }\n\n    public remove(cacheKey: string): void {\n        this.storage.remove(cacheKey);\n    }\n\n    private itemDueToExpire(item: ICachable): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (!item.expires) {\n            return false;\n        }\n\n        return item.expires - Date.now() < (this.autoRenewWindow);\n    }\n\n    private async autoRenewRenewableItems() {\n        this.updateFunctions.forEach(async (updateFunction, key) => {\n            const cachedItem = await this.get(key);\n            if (!cachedItem) {\n                return;\n            }\n\n            if (updateFunction && this.itemDueToExpire(cachedItem)) {\n                await this.tryUpdateItem(key, cachedItem, updateFunction);\n            }\n        });\n    }\n\n    private async tryUpdateItem(key: string, cachedItem: ICachable, updateFunction: (item: ICachable) => Promise<ICachable>) {\n        try {\n            const updated = await updateFunction(cachedItem);\n            if (updated) {\n                this.setCacheItem(key, updated);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n}\n", "import GenericCache from \"./GenericCache.js\";\nimport type { ICacheStore } from \"./ICacheStore.js\";\n\nexport default class LocalStorageCachingStrategy extends GenericCache {\n    constructor() {\n        super(new LocalStorageCacheStore());\n    }\n}\n\nclass LocalStorageCacheStore implements ICacheStore {\n    public get(key: string): string | null {\n        return localStorage.getItem(key);\n    }\n\n    public set(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    public remove(key: string): void {\n        localStorage.removeItem(key);\n    }\n}\n", "import GenericCache from \"./GenericCache.js\";\nimport type { ICacheStore } from \"./ICacheStore.js\";\n\nexport default class InMemoryCachingStrategy extends GenericCache {\n    constructor() {\n        super(new DictionaryCacheStore());\n    }\n}\n\nclass DictionaryCacheStore implements ICacheStore {\n    private cache = new Map<string, string>();\n\n    public get(key: string): string | null {\n        return this.cache.get(key) ?? null;\n    }\n\n    public set(key: string, value: string): void {\n        this.cache.set(key, value);\n    }\n\n    public remove(key: string): void {\n        this.cache.delete(key);\n    }\n}\n", "import { AccessToken, SdkConfiguration } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy from \"./IAuthStrategy.js\";\n\n/**\n * This strategy is used when you already have an access token and want to use it.\n * The authentication strategy will automatically renew the token when it expires.\n * Designed to allow a browser-based-app to post the access token to the server and use it from there.\n * @constructor\n * @param {string} clientId - Spotify application client id.\n * @param {string} accessToken - The access token returned from a client side Authorization Code with PKCE flow.\n */\nexport default class ProvidedAccessTokenStrategy implements IAuthStrategy {\n    private refreshTokenAction: (clientId: string, token: AccessToken) => Promise<AccessToken>;\n\n    constructor(\n        protected clientId: string,\n        protected accessToken: AccessToken,\n        refreshTokenAction?: (clientId: string, token: AccessToken) => Promise<AccessToken>\n    ) {\n        this.refreshTokenAction = refreshTokenAction || AccessTokenHelpers.refreshCachedAccessToken;\n\n        // If the raw token from the jwt response is provided here\n        // Calculate an absolute `expiry` value.\n        // Caveat: If this token isn't fresh, this value will be off.\n        // It's the responsibility of the calling code to either set a valid\n        // expires property, or ensure expires_in accounts for any lag between\n        // issuing and passing here.\n\n        if (!this.accessToken.expires) {\n            this.accessToken.expires = AccessTokenHelpers.calculateExpiry(this.accessToken);\n        }\n    }\n\n    public setConfiguration(_: SdkConfiguration): void {\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        if (this.accessToken.expires && this.accessToken.expires <= Date.now()) {\n            const refreshed = await this.refreshTokenAction(this.clientId, this.accessToken);\n            this.accessToken = refreshed;\n        }\n\n        return this.accessToken;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        return this.accessToken;\n    }\n\n    public removeAccessToken(): void {\n        this.accessToken = {\n            access_token: \"\",\n            token_type: \"\",\n            expires_in: 0,\n            refresh_token: \"\",\n            expires: 0\n        };\n    }\n}\n", "import AlbumsEndpoints from \"./endpoints/AlbumsEndpoints.js\";\nimport ArtistsEndpoints from \"./endpoints/ArtistsEndpoints.js\";\nimport AudiobooksEndpoints from \"./endpoints/AudiobooksEndpoints.js\";\nimport BrowseEndpoints from \"./endpoints/BrowseEndpoints.js\";\nimport ChaptersEndpoints from \"./endpoints/ChaptersEndpoints.js\";\nimport EpisodesEndpoints from \"./endpoints/EpisodesEndpoints.js\";\nimport RecommendationsEndpoints from \"./endpoints/RecommendationsEndpoints.js\";\nimport MarketsEndpoints from \"./endpoints/MarketsEndpoints.js\";\nimport PlayerEndpoints from \"./endpoints/PlayerEndpoints.js\";\nimport PlaylistsEndpoints from \"./endpoints/PlaylistsEndpoints.js\";\nimport SearchEndpoints, { SearchExecutionFunction } from \"./endpoints/SearchEndpoints.js\";\nimport ShowsEndpoints from \"./endpoints/ShowsEndpoints.js\";\nimport TracksEndpoints from \"./endpoints/TracksEndpoints.js\";\nimport IAuthStrategy, { isEmptyAccessToken } from \"./auth/IAuthStrategy.js\";\nimport UsersEndpoints from \"./endpoints/UsersEndpoints.js\";\nimport CurrentUserEndpoints from \"./endpoints/CurrentUserEndpoints.js\";\nimport ClientCredentialsStrategy from \"./auth/ClientCredentialsStrategy.js\";\nimport ImplicitGrantStrategy from \"./auth/ImplicitGrantStrategy.js\";\nimport AuthorizationCodeWithPKCEStrategy from \"./auth/AuthorizationCodeWithPKCEStrategy.js\";\nimport DefaultResponseDeserializer from \"./serialization/DefaultResponseDeserializer.js\";\nimport DefaultResponseValidator from \"./responsevalidation/DefaultResponseValidator.js\";\nimport NoOpErrorHandler from \"./errorhandling/NoOpErrorHandler.js\";\nimport DocumentLocationRedirectionStrategy from \"./redirection/DocumentLocationRedirectionStrategy.js\";\nimport LocalStorageCachingStrategy from \"./caching/LocalStorageCachingStrategy.js\";\nimport InMemoryCachingStrategy from \"./caching/InMemoryCachingStrategy.js\";\nimport ProvidedAccessTokenStrategy from \"./auth/ProvidedAccessTokenStrategy.js\";\nimport type { AccessToken, SdkConfiguration, SdkOptions, AuthenticationResponse } from \"./types.js\";\n\nexport class SpotifyApi {\n    private sdkConfig: SdkConfiguration;\n    private static rootUrl: string = \"https://api.spotify.com/v1/\";\n\n    private authenticationStrategy: IAuthStrategy;\n\n    public albums: AlbumsEndpoints;\n    public artists: ArtistsEndpoints;\n    public audiobooks: AudiobooksEndpoints;\n    public browse: BrowseEndpoints;\n    public chapters: ChaptersEndpoints;\n    public episodes: EpisodesEndpoints;\n    public recommendations: RecommendationsEndpoints;\n    public markets: MarketsEndpoints;\n    public player: PlayerEndpoints;\n    public playlists: PlaylistsEndpoints;\n    public shows: ShowsEndpoints;\n    public tracks: TracksEndpoints;\n    public users: UsersEndpoints;\n    public search: SearchExecutionFunction;\n\n    public currentUser: CurrentUserEndpoints;\n\n    public constructor(authentication: IAuthStrategy, config?: SdkOptions) {\n        this.sdkConfig = this.initializeSdk(config);\n\n        this.albums = new AlbumsEndpoints(this);\n        this.artists = new ArtistsEndpoints(this);\n        this.audiobooks = new AudiobooksEndpoints(this);\n        this.browse = new BrowseEndpoints(this);\n        this.chapters = new ChaptersEndpoints(this);\n        this.episodes = new EpisodesEndpoints(this);\n        this.recommendations = new RecommendationsEndpoints(this);\n        this.markets = new MarketsEndpoints(this);\n        this.player = new PlayerEndpoints(this);\n        this.playlists = new PlaylistsEndpoints(this);\n        this.shows = new ShowsEndpoints(this);\n        this.tracks = new TracksEndpoints(this);\n        this.users = new UsersEndpoints(this);\n        this.currentUser = new CurrentUserEndpoints(this);\n\n        const search = new SearchEndpoints(this);\n        this.search = search.execute.bind(search);\n\n        this.authenticationStrategy = authentication;\n        this.authenticationStrategy.setConfiguration(this.sdkConfig);\n    }\n\n    public async makeRequest<TReturnType>(method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\", url: string, body: any = undefined, contentType: string | undefined = undefined): Promise<TReturnType> {\n        try {\n            const accessToken = await this.authenticationStrategy.getOrCreateAccessToken();\n            if (isEmptyAccessToken(accessToken)) {\n                console.warn(\"No access token found, authenticating now.\");\n                return null as TReturnType;\n            }\n\n            const token = accessToken?.access_token;\n\n            const fullUrl = SpotifyApi.rootUrl + url;\n            const opts: RequestInit = {\n                method: method,\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"Content-Type\": contentType ?? \"application/json\"\n                },\n                body: body ? typeof body === \"string\" ? body : JSON.stringify(body) : undefined\n            };\n\n            this.sdkConfig.beforeRequest(fullUrl, opts);\n            const result = await this.sdkConfig.fetch(fullUrl, opts);\n            this.sdkConfig.afterRequest(fullUrl, opts, result);\n\n            if (result.status === 204) {\n                return null as TReturnType;\n            }\n\n            await this.sdkConfig.responseValidator.validateResponse(result);\n            return this.sdkConfig.deserializer.deserialize<TReturnType>(result);\n        } catch (error) {\n            const handled = await this.sdkConfig.errorHandler.handleErrors(error);\n            if (!handled) {\n                throw error;\n            }\n            return null as TReturnType;\n        }\n    }\n\n    private initializeSdk(config: SdkOptions | undefined): SdkConfiguration {\n        const isBrowser = typeof window !== 'undefined';\n\n        const defaultConfig: SdkConfiguration = {\n            fetch: (req: RequestInfo | URL, init: RequestInit | undefined) => fetch(req, init),\n            beforeRequest: (_: string, __: RequestInit) => { },\n            afterRequest: (_: string, __: RequestInit, ___: Response) => { },\n            deserializer: new DefaultResponseDeserializer(),\n            responseValidator: new DefaultResponseValidator(),\n            errorHandler: new NoOpErrorHandler(),\n            redirectionStrategy: new DocumentLocationRedirectionStrategy(),\n            cachingStrategy: isBrowser\n                ? new LocalStorageCachingStrategy()\n                : new InMemoryCachingStrategy()\n        };\n\n        return { ...defaultConfig, ...config };\n    }\n\n    public switchAuthenticationStrategy(authentication: IAuthStrategy) {\n        this.authenticationStrategy = authentication;\n        this.authenticationStrategy.setConfiguration(this.sdkConfig);\n        this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects \n    }\n\n    /**\n     * Use this when you're running in a browser and you want to control when first authentication+redirect happens.\n    */\n    public async authenticate(): Promise<AuthenticationResponse> {\n        const response = await this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects\n\n        return {\n            authenticated: response.expires! > Date.now() && !isEmptyAccessToken(response),\n            accessToken: response\n        };\n    }\n\n    /**\n     * @returns the current access token. null implies the SpotifyApi is not yet authenticated.\n     */\n    public async getAccessToken(): Promise<AccessToken | null> {\n        return this.authenticationStrategy.getAccessToken();\n    }\n\n    /**\n     * Removes the access token if it exists.\n     */\n    public logOut(): void {\n        this.authenticationStrategy.removeAccessToken();\n    }\n\n    public static withUserAuthorization(clientId: string, redirectUri: string, scopes: string[] = [], config?: SdkOptions): SpotifyApi {\n        const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n\n    public static withClientCredentials(clientId: string, clientSecret: string, scopes: string[] = [], config?: SdkOptions): SpotifyApi {\n        const strategy = new ClientCredentialsStrategy(clientId, clientSecret, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n\n    public static withImplicitGrant(clientId: string, redirectUri: string, scopes: string[] = [], config?: SdkOptions): SpotifyApi {\n        const strategy = new ImplicitGrantStrategy(clientId, redirectUri, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n\n    /**\n     * Use this when you're running in a Node environment, and accepting the access token from a client-side `performUserAuthorization` call.\n     * You can also use this method if you already have an access token and don't want to use the built-in authentication strategies.\n     */\n    public static withAccessToken(clientId: string, token: AccessToken, config?: SdkOptions): SpotifyApi {\n        const strategy = new ProvidedAccessTokenStrategy(clientId, token);\n        return new SpotifyApi(strategy, config);\n    }\n\n    /**\n     * Use this when you're running in the browser, and want to perform the user authorization flow to post back to your server with the access token.\n     * @param clientId Your Spotify client ID\n     * @param redirectUri The URI to redirect to after the user has authorized your app\n     * @param scopes The scopes to request\n     * @param postbackUrl The URL to post the access token to\n     * @param config Optional configuration\n     */\n    public static async performUserAuthorization(clientId: string, redirectUri: string, scopes: string[], postbackUrl: string, config?: SdkOptions): Promise<AuthenticationResponse>;\n\n    /**\n     * Use this when you're running in the browser, and want to perform the user authorization flow to post back to your server with the access token.\n     * This overload is provided for you to perform the postback yourself, if you want to do something other than a simple HTTP POST to a URL - for example, if you want to use a WebSocket, or provide custom authentication.\n     * @param clientId Your Spotify client ID\n     * @param redirectUri The URI to redirect to after the user has authorized your app\n     * @param scopes The scopes to request\n     * @param onAuthorization A function to call with the access token where YOU perform the server-side postback\n     * @param config Optional configuration\n     */\n    public static async performUserAuthorization(clientId: string, redirectUri: string, scopes: string[], onAuthorization: (token: AccessToken) => Promise<void>, config?: SdkOptions): Promise<AuthenticationResponse>;\n\n    public static async performUserAuthorization(clientId: string, redirectUri: string, scopes: string[], onAuthorizationOrUrl: ((token: AccessToken) => Promise<void>) | string, config?: SdkOptions): Promise<AuthenticationResponse> {\n        const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n        const client = new SpotifyApi(strategy, config);\n        const accessToken = await client.authenticationStrategy.getOrCreateAccessToken();\n\n        if (!isEmptyAccessToken(accessToken)) {\n            if (typeof onAuthorizationOrUrl === \"string\") {\n                console.log(\"Posting access token to postback URL.\");\n                await fetch(onAuthorizationOrUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(accessToken)\n                });\n            } else {\n                await onAuthorizationOrUrl(accessToken);\n            }\n        }\n\n        return {\n            authenticated: accessToken.expires! > Date.now() && !isEmptyAccessToken(accessToken),\n            accessToken\n        };\n    }\n}\n", "import type { IHandleErrors } from \"../types.js\";\n\nexport default class ConsoleLoggingErrorHandler implements IHandleErrors {\n    public async handleErrors(error: any): Promise<boolean> {\n        console.log(error);\n        return false;\n    }\n}\n", "export class Scopes {\n\n    public static get playlist() {\n        return [\n            ...Scopes.playlistRead,\n            ...Scopes.playlistModify\n        ];\n    }\n\n    public static get playlistRead() {\n        return [\n            \"playlist-read-private\",\n            \"playlist-read-collaborative\",\n        ];\n    }\n\n    public static get playlistModify() {\n        return [\n            \"playlist-modify-public\",\n            \"playlist-modify-private\",\n            \"ugc-image-upload\"\n        ];\n    }\n\n    public static get userDetails() {\n        return [\n            \"user-read-private\",\n            \"user-read-email\",\n        ];\n    }\n\n    public static get userLibrary() {\n        return [\n            ...Scopes.userLibraryRead,\n            ...Scopes.userLibraryModify\n        ];\n    }\n\n    public static get userLibraryRead() {\n        return [\n            \"user-library-read\",\n        ];\n    }\n\n    public static get userLibraryModify() {\n        return [\n            \"user-library-modify\",\n        ];\n    }\n\n    public static get userRecents() {\n        return [\n            \"user-top-read\",\n            \"user-read-recently-played\",\n        ];\n    }\n\n    public static get userFollow() {\n        return [\n            ...Scopes.userFollowRead,\n            ...Scopes.userFollowModify\n        ];\n    }\n\n    public static get userFollowRead() {\n        return [\n            \"user-follow-read\",\n        ];\n    }\n\n    public static get userFollowModify() {\n        return [\n            \"user-follow-modify\",\n        ];\n    }\n\n    public static get userPlayback() {\n        return [\n            ...Scopes.userPlaybackRead,\n            ...Scopes.userPlaybackModify\n        ];\n    }\n\n    public static get userPlaybackRead() {\n        return [\n            \"user-read-playback-position\",\n            \"user-read-playback-state\",\n            \"user-read-currently-playing\",\n        ];\n    }\n\n    public static get userPlaybackModify() {\n        return [\n            \"user-modify-playback-state\",\n            \"app-remote-control\",\n            \"streaming\"\n        ];\n    }\n\n    public static get all() {\n        return [\n            ...Scopes.userDetails,\n            ...Scopes.playlist,\n            ...Scopes.userLibrary,\n            ...Scopes.userRecents,\n            ...Scopes.userFollow,\n            ...Scopes.userPlayback,\n        ];\n    }\n}"],
  "mappings": "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",
  "names": ["params", "params", "params", "params", "params", "params", "token", "token", "token", "body"]
}
